# syntax=docker/dockerfile:1
ARG FROM=localhost/phase0:latest

FROM ${FROM} AS phase1

# steal ca-certs from curl image for cargo to use
COPY --from=docker.io/curlimages/curl:latest /etc/ssl /etc/ssl

ENV RUSTC_WRAPPER=sccache
ENV SCCACHE_DIR=/sccache
ENV CARGO_HOME=/cargo
ENV TRIPLE=x86_64-phiban-linux-musl
ENV PHASE0_SYSROOT=/sysroots/phase0
ENV PHASE1_SYSROOT=/sysroots/phase1
ENV PATH="${PHASE0_SYSROOT}/usr/bin"
ENV   CFLAGS="-O3 -march=native"
ENV CXXFLAGS="-O3 -march=native"

WORKDIR ${PHASE1_SYSROOT}
RUN mkdir usr usr/bin usr/lib etc \
    && ln -sv usr/lib lib \
    && ln -sv usr/bin bin \
    && ln -sv lib usr/lib64 \
    && ln -sv . toolchain

WORKDIR /sources/python
RUN ./configure \
        --prefix=${PHASE1_SYSROOT}/usr \
        --build=${TRIPLE} \
        --host=${TRIPLE} \
        --enable-shared \
        --without-ensurepip \
    && make -j64 \
    && make install

WORKDIR /sources/llvm-project
COPY llvm.cmake /
COPY patches/llvm-project /patches/llvm-project
RUN --mount=type=cache,target=${SCCACHE_DIR},id=sccache-phase1 \
    patch -p1 < /patches/llvm-project/toolchain-prefix.patch \
    && cmake -S llvm -B build -G Ninja \
        -D CMAKE_C_COMPILER_LAUNCHER=sccache \
        -D CMAKE_CXX_COMPILER_LAUNCHER=sccache \
        -D BUILD_SYSROOT=${PHASE0_SYSROOT} \
        -D BUILD_TRIPLE=${TRIPLE} \
        -D TARGET_SYSROOT=${PHASE1_SYSROOT} \
        -D TARGET_TRIPLE=${TRIPLE} \
        -C /llvm.cmake \
    && cmake --build build --target install-runtimes \
    && cmake --build build --target stage2-install-distribution

# This should be unneeded but we would have to patch rust search paths to look
# under /toolchain to be a proper patch. Use sysroots to ensure it will find our
# include and lib directories properly.
#ENV   CFLAGS="--sysroot=${PHASE1_SYSROOT}"
#ENV CXXFLAGS="--sysroot=${PHASE1_SYSROOT}"
#ENV  LDFLAGS="--sysroot=${PHASE1_SYSROOT}"

# Build rust again with the patched musl-dynamic target
WORKDIR /git_sources/rust
RUN --mount=type=cache,target=${CARGO_HOME},id=cargo \
    --mount=type=cache,target=${SCCACHE_DIR},id=sccache-phase1 \
    ./configure \
        --set=build.jobs=64 \
        --set=build.cargo=${PHASE0_SYSROOT}/usr/bin/cargo \
        --set=build.cargo-clippy=${PHASE0_SYSROOT}/usr/bin/cargo-clippy \
        --set=build.rustc=${PHASE0_SYSROOT}/usr/bin/rustc \
        --set=build.rustfmt=${PHASE0_SYSROOT}/usr/bin/rustfmt \
        --set=build.host=${TRIPLE} \
        --set=build.build=${TRIPLE} \
        --set=build.target=${TRIPLE} \
        --set=install.prefix=${PHASE1_SYSROOT}/usr \
        --set=install.sysconfdir=etc \
        --set=llvm.use-libcxx=true \
        --set=rust.llvm-libunwind=system \
        --set=target.${TRIPLE}.llvm-config=${PHASE1_SYSROOT}/usr/bin/llvm-config \
    && python3 x.py build -j64 \
    && python3 x.py install

WORKDIR /git_sources/sccache
RUN --mount=type=cache,target=${CARGO_HOME},id=cargo \
    --mount=type=cache,target=${SCCACHE_DIR},id=sccache-phase1 \
    cargo install --root ${PHASE1_SYSROOT}/usr --path ./ --features native-zlib

WORKDIR /git_sources/coreutils
RUN --mount=type=cache,target=${CARGO_HOME},id=cargo \
    --mount=type=cache,target=${SCCACHE_DIR},id=sccache-phase1 \
    cargo install --root ${PHASE1_SYSROOT}/usr --path ./ --features unix

WORKDIR /git_sources/findutils
RUN --mount=type=cache,target=${CARGO_HOME},id=cargo \
    --mount=type=cache,target=${SCCACHE_DIR},id=sccache-phase1 \
    cargo install --root ${PHASE1_SYSROOT}/usr --path ./

WORKDIR /git_sources/diffutils
RUN --mount=type=cache,target=${CARGO_HOME},id=cargo \
    --mount=type=cache,target=${SCCACHE_DIR},id=sccache-phase1 \
    cargo install --root ${PHASE1_SYSROOT}/usr --path ./

# ###
# # GNU tools
# WORKDIR /sources/make
# RUN ./configure \
#         --prefix=${PHASE1_SYSROOT}/usr \
#         --build=${TRIPLE} \
#         --host=${TRIPLE} \
#     && make -j64 \
#     && make install
# 
# WORKDIR /sources/gawk
# RUN ./configure \
#         --prefix=${PHASE1_SYSROOT}/usr \
#         --build=${TRIPLE} \
#         --host=${TRIPLE} \
#         --disable-extensions \
#     && make -j64 \
#     && make install
# 
# WORKDIR /sources/grep
# RUN ./configure \
#         --prefix=${PHASE1_SYSROOT}/usr \
#         --build=${TRIPLE} \
#         --host=${TRIPLE} \
#     && make -j64 \
#     && make install
# 
# WORKDIR /sources/sed
# RUN ./configure \
#         --prefix=${PHASE1_SYSROOT}/usr \
#         --build=${TRIPLE} \
#         --host=${TRIPLE} \
#     && make -j64 \
#     && make install
# 
# # TODO: Drop this once all sources exist in the git mirror. Use git apply after
# WORKDIR /sources/patch
# RUN ./configure \
#         --prefix=${PHASE1_SYSROOT}/usr \
#         --build=${TRIPLE} \
#         --host=${TRIPLE} \
#     && make -j64 \
#     && make install
# 
# # We need a shell. It is not optional if we want to keep building in a container
# WORKDIR /sources/bash
# COPY bash-fix-missing-header.patch /
# RUN patch -p1 < /bash-fix-missing-header.patch && \
#     ./configure \
#         --prefix=${PHASE1_SYSROOT}/usr \
#         --build=${TRIPLE} \
#         --host=${TRIPLE} \
#         --without-bash-malloc \
#     && make -j64 \
#     && make install
# RUN ln -sv bash ${PHASE1_SYSROOT}/usr/bin/sh
# # END GNU tools
# ###
# 
# WORKDIR /sources/perl
# RUN export BUILD_ZLIB=False BUILD_BZIP2=0 \
#     && sh Configure -des \
#         -D libc=__REPLACE_LIBDIR__/${TRIPLE}/libc.so \
#         -D prefix=__REPLACE_PREFIX__ \
#         -D vendorprefix=__REPLACE_PREFIX__ \
#         -D bin=__REPLACE_PREFIX__/bin \
#         -D vendorbin=__REPLACE_PREFIX__/bin \
#         -D vendorscript=__REPLACE_PREFIX__/bin \
#         -D privlib=__REPLACE_LIBDIR__/perl5/5.40/core_perl \
#         -D archlib=__REPLACE_LIBDIR__/perl5/5.40/core_perl \
#         -D sitelib=__REPLACE_LIBDIR__/perl5/5.40/site_perl \
#         -D sitearch=__REPLACE_LIBDIR__/perl5/5.40/site_perl \
#         -D vendorlib=__REPLACE_LIBDIR__/perl5/5.40/vendor_perl \
#         -D vendorarch=__REPLACE_LIBDIR__/perl5/5.40/vendor_perl \
#         -D userelocatableinc \
#         -D useshrplib \
#         -D usethreads \
#     && sed -i \
#            -e 's|__REPLACE_PREFIX__|'${PHASE1_SYSROOT}'/usr|g' \
#            -e 's|__REPLACE_LIBDIR__|'${PHASE1_SYSROOT}'/usr/lib|g' \
#            Makefile \
#     && sed -i \
#            -e '/^[^=]*install[^=]*=/ s|__REPLACE_PREFIX__|'${PHASE1_SYSROOT}'/usr|g' \
#            -e '/^[^=]*install[^=]*=/ s|__REPLACE_LIBDIR__|'${PHASE1_SYSROOT}'/usr/lib|g' \
#            Policy.sh \
#            config.sh \
#     && sed -i \
#            -e 's|__REPLACE_PREFIX__|.../..|g' \
#            -e 's|__REPLACE_LIBDIR__|.../../lib|g' \
#            config.sh \
#            Policy.sh \
#     && make -j64 \
#     && make install
# 
# WORKDIR /sources/cmake
# RUN cmake \
#         -B build \
#         -D CMAKE_INSTALL_PREFIX=${PHASE1_SYSROOT}/usr \
#     && cmake --build build --parallel 64 \
#     && cmake --build build --target install
# 
# WORKDIR /sources/ninja
# RUN cmake \
#         -B build \
#         -D CMAKE_INSTALL_PREFIX=${PHASE1_SYSROOT}/usr \
#         -D BUILD_TESTING=OFF \
#     && cmake --build build --parallel 64 \
#     && cmake --build build --target install

# container image compat hack
RUN mkdir -p /compat/hack /compat/bin /compat/tmp \
    && ln -sfv ${PHASE1_SYSROOT} /compat/hack/toolchain \
    && ln -sfv ${PHASE1_SYSROOT}/usr/bin/sh /compat/bin/sh

FROM scratch
COPY --from=phase1 /sysroots/phase1 /sysroots/phase1
COPY --from=phase1 /compat/hack/ /
COPY --from=phase1 /compat/bin /bin
COPY --from=phase1 /compat/tmp /tmp
ENV PATH="/toolchain/usr/bin"
